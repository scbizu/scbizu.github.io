<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 一只菜鸡的成长之路</title>
    <link>https://blog.scnace.me/tags/go/</link>
    <description>Recent content in Go on 一只菜鸡的成长之路</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>copyleft</copyright>
    <lastBuildDate>Sun, 04 Oct 2020 19:00:06 +0800</lastBuildDate><atom:link href="https://blog.scnace.me/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Module Migration</title>
      <link>https://blog.scnace.me/post/go-module-migration/</link>
      <pubDate>Sun, 04 Oct 2020 19:00:06 +0800</pubDate>
      
      <guid>https://blog.scnace.me/post/go-module-migration/</guid>
      <description>Go Module Migration From GOPATH Vendor 本篇记录了我们团队是怎么从「特殊」的Go Vendor模式迁移到Go Modules，并且怎么在每个项目中管理这些依赖 Vendoring 在介绍Go的</description>
    </item>
    
    <item>
      <title>使用up来部署AWS Lambda应用</title>
      <link>https://blog.scnace.me/post/why-i-choose-up-to-deploy-go-serverless-application/</link>
      <pubDate>Sat, 05 Oct 2019 23:50:21 +0800</pubDate>
      
      <guid>https://blog.scnace.me/post/why-i-choose-up-to-deploy-go-serverless-application/</guid>
      <description>前言 up真香 终于还是来写这篇博客了，本文记录了我的AWS Lambda Function APP 的部署工具从apex up迁移到原生的AWS Lambda Go SDK，然后再迁回``pex up</description>
    </item>
    
    <item>
      <title>Go os.Pipe()</title>
      <link>https://blog.scnace.me/post/go-os-pipe/</link>
      <pubDate>Mon, 06 May 2019 02:05:20 +0800</pubDate>
      
      <guid>https://blog.scnace.me/post/go-os-pipe/</guid>
      <description>记一个有趣的小bug 0x00 起因 (紫薯布丁) 因为最近在研究mgo和mongo官方的驱动，因为不能让领导觉得我是在划水，所以，肯定要出点研究成果的。</description>
    </item>
    
    <item>
      <title>记一个有趣的bug</title>
      <link>https://blog.scnace.me/post/%E8%AE%B0%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84bug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E8%AE%B0%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84bug/</guid>
      <description>先看代码 Go Playground package main import ( &amp;#34;fmt&amp;#34; ) type bug struct { name string cause string } func main() { bugNames := []string{&amp;#34;an&amp;#34;, &amp;#34;interesting&amp;#34;, &amp;#34;bug&amp;#34;} var bugs []*bug bugObj := &amp;amp;bug{ cause: &amp;#34;sth&amp;#34;, } for idx, bn := range bugNames { bugs = append(bugs, bugObj) bugs[idx].name = bn } for _, b := range bugs { fmt.Printf(&amp;#34;bug:%v&amp;#34;, *b) } } 其实,不难看</description>
    </item>
    
  </channel>
</rss>
