<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>伪技术相关 on 一只菜鸡的成长之路</title>
    <link>https://blog.scnace.me/categories/%E4%BC%AA%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/</link>
    <description>Recent content in 伪技术相关 on 一只菜鸡的成长之路</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>copyleft</copyright>
    <lastBuildDate>Sat, 07 Oct 2017 00:06:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.scnace.me/categories/%E4%BC%AA%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nace&#39;s CookBook</title>
      <link>https://blog.scnace.me/post/cookbook/</link>
      <pubDate>Sat, 07 Oct 2017 00:06:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/cookbook/</guid>
      <description>CookBook 这里会记录一些Nace经常碰到的一些不容易记住的编程相关的 专业术语 和 小Tips ; About Code 位运算符 位运算符 语义/Semantics e.g. &amp;amp; 按位与/A</description>
    </item>
    
    <item>
      <title>效率神器之Alfred Workflow</title>
      <link>https://blog.scnace.me/post/alfredworkflowv3/</link>
      <pubDate>Mon, 02 Oct 2017 22:25:21 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/alfredworkflowv3/</guid>
      <description>效率神器之Alfred Workflow 一个Go的Alfred Workflow简单封装库: https://github.com/scbizu/alfredV3 简介 生活在Mac上的工作者肯定对效率神器 Alfred 不会陌生, 免费版的AP</description>
    </item>
    
    <item>
      <title>那么就开始使用Context吧</title>
      <link>https://blog.scnace.me/post/head-to-context/</link>
      <pubDate>Sun, 25 Jun 2017 16:49:56 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/head-to-context/</guid>
      <description>Context并不是银弹,使用时需注意其使用场景。 Context golang的context包的&amp;rdquo;前身&amp;rdquo;来自golang.org</description>
    </item>
    
    <item>
      <title>2016年度总结之认知</title>
      <link>https://blog.scnace.me/post/2016%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93%E4%B9%8B%E8%AE%A4%E7%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/2016%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93%E4%B9%8B%E8%AE%A4%E7%9F%A5/</guid>
      <description>前面的路似乎向来坑坑洼洼,但是望望之前走过的路,也不是这样吗?这时,即便是你,也会露出不同的笑容吧。 回顾下自己的2016，似乎发生了很多以后</description>
    </item>
    
    <item>
      <title>Docker下搭建Elasticsearch及其集群</title>
      <link>https://blog.scnace.me/post/docker%E4%B8%8Bes%E5%8F%8A%E5%85%B6%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/docker%E4%B8%8Bes%E5%8F%8A%E5%85%B6%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/</guid>
      <description>Why Docker ? 作为当下大热的Docker,一直有用到工作中的冲动。这次正好有个集群搭建的需求,就毫不犹豫,一脚踏入Docker,容器化的概念方便部署</description>
    </item>
    
    <item>
      <title>JSON的语义化挑战--Collection&#43;JSON</title>
      <link>https://blog.scnace.me/post/json%E7%9A%84%E8%AF%AD%E4%B9%89%E5%8C%96%E6%8C%91%E6%88%98-collection-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/json%E7%9A%84%E8%AF%AD%E4%B9%89%E5%8C%96%E6%8C%91%E6%88%98-collection-json/</guid>
      <description>背景 在长达数十年的API表述格式的竞争中,XML终究还是败下阵来,JSON因为他的简洁以及对JavaScript的友好,被大肆地铺开使用。然</description>
    </item>
    
    <item>
      <title>ShadowSocksX查看已经储存的Server信息</title>
      <link>https://blog.scnace.me/post/shadowsocksx%E6%9F%A5%E7%9C%8B%E5%B7%B2%E7%BB%8F%E5%82%A8%E5%AD%98%E7%9A%84server%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/shadowsocksx%E6%9F%A5%E7%9C%8B%E5%B7%B2%E7%BB%8F%E5%82%A8%E5%AD%98%E7%9A%84server%E4%BF%A1%E6%81%AF/</guid>
      <description>我什么都不知道,就单纯记录下之后可能用的到的命令行: ʕ ◔ ϖ ◔ ʔ ➜ ~ cd ~/Library ʕ ◔ ϖ ◔ ʔ ➜ Library cd Preferences ʕ ◔ ϖ ◔ ʔ ➜ Preferences cp ~/Library/Preferences/clowwindy.ShadowsocksX.plist ~/backups #备份plist 以防之后操作失误</description>
    </item>
    
    <item>
      <title>goeclipse配置指南</title>
      <link>https://blog.scnace.me/post/goeclipse%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/goeclipse%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</guid>
      <description>之前用的是Liteide 但是觉得在Lite里面敲代码一点都不优雅啊，所以准备转Goclipse了 还是Eclipse大法吼啊。。 参考文章：Go</description>
    </item>
    
    <item>
      <title>golang bufio实验</title>
      <link>https://blog.scnace.me/post/golang-bufio%E5%AE%9E%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/golang-bufio%E5%AE%9E%E9%AA%8C/</guid>
      <description>Who is he? 好了 开始今天的包 嗯 今天的包的名字是bufio . 他呢 就是证明golang不单单是脚本语言的证据! 他实现了缓冲 I/O 他包含了io.Reader</description>
    </item>
    
    <item>
      <title>golang channel实验</title>
      <link>https://blog.scnace.me/post/golang-channel%E5%AE%9E%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/golang-channel%E5%AE%9E%E9%AA%8C/</guid>
      <description>信道(channel)是Goroutine之间通信的手段,所以,掌握Channel的用法之于Golang的学习变得尤为重要。 信道到底是怎么一</description>
    </item>
    
    <item>
      <title>golang panic和recover实验小结</title>
      <link>https://blog.scnace.me/post/golang-panic%E5%92%8Crecover%E5%AE%9E%E9%AA%8C%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/golang-panic%E5%92%8Crecover%E5%AE%9E%E9%AA%8C%E5%B0%8F%E7%BB%93/</guid>
      <description>认识Panic和Recover Panic 这是Golang中的一个内建函数，可以中断原有的控制流程，进入一个令人恐慌的流程中。当函数F调用Panic，</description>
    </item>
    
    <item>
      <title>golang 闭包实践</title>
      <link>https://blog.scnace.me/post/golang-%E9%97%AD%E5%8C%85%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/golang-%E9%97%AD%E5%8C%85%E5%AE%9E%E8%B7%B5/</guid>
      <description>Problem 前几天在 知乎 上看到了一个很好的问题 回答中也有很多干货 于是 我也想加深一下对闭包的理解 于是 写下了这篇部落格。 Description 作用域(scopes) 作用域,它</description>
    </item>
    
    <item>
      <title>golang多返回值写法</title>
      <link>https://blog.scnace.me/post/golang%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC%E5%86%99%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/golang%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC%E5%86%99%E6%B3%95/</guid>
      <description>看热闹不嫌事大系列&amp;mdash;&amp;mdash;&amp;ndash;&amp;gt;如何看待函数返回多个值的设计? From 知乎 这个号称是Golang特性之一的 多返</description>
    </item>
    
    <item>
      <title>golang常用数据结构</title>
      <link>https://blog.scnace.me/post/golang%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/golang%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>原post:RUSS Cox Blog Go Data Structure 一些常用数据格式如下所示: 图解： i在memory中表示一个32 bits的数据,也就是4 bytes的数据。也就是</description>
    </item>
    
    <item>
      <title>golang的一个OCR库</title>
      <link>https://blog.scnace.me/post/golang%E7%9A%84%E4%B8%80%E4%B8%AAocr%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/golang%E7%9A%84%E4%B8%80%E4%B8%AAocr%E5%BA%93/</guid>
      <description>嗯，这篇要记录的是 Golang的一个OCR库。名字是 gosseract (基于用途最广泛的一个OCR库tesseract) 遇到的问题是 按照 说明 install tesseract-ocr install go install gosseract go get</description>
    </item>
    
    <item>
      <title>golang结构体和json之间的转换小结</title>
      <link>https://blog.scnace.me/post/golang%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8Cjson%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/golang%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8Cjson%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%B0%8F%E7%BB%93/</guid>
      <description>golang提供了结构体到特定格式json/xml/&amp;hellip; 转换的便捷途径 我们通过json包 很方便的就可以进行struct到json</description>
    </item>
    
    <item>
      <title>php emoji表情无法获取问题</title>
      <link>https://blog.scnace.me/post/php-emoji%E8%A1%A8%E6%83%85%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/php-emoji%E8%A1%A8%E6%83%85%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E9%97%AE%E9%A2%98/</guid>
      <description>why ? 带Emoji表情的用户名简直就是社交用户三大毒瘤之一(e.g. Instagram,facebook,and wechat); 然而,跟用户说 我不让你用Emoji表情 可能会极大程度激发用户的逆反心理</description>
    </item>
    
    <item>
      <title>php&amp;jQuery 实现动态链接</title>
      <link>https://blog.scnace.me/post/phpjquery-%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/phpjquery-%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/</guid>
      <description>之前已经遇到过很多次这种问题了。 每次都要去看一遍sf上的解决方案,由于又不是一毛一样的问题,所以,每次都要自己再想一遍整个流程。 So，赶脚 很</description>
    </item>
    
    <item>
      <title>一次爬方正教务处的成功实践</title>
      <link>https://blog.scnace.me/post/%E4%B8%80%E6%AC%A1%E7%88%AC%E6%96%B9%E6%AD%A3%E6%95%99%E5%8A%A1%E5%A4%84%E7%9A%84%E6%88%90%E5%8A%9F%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E4%B8%80%E6%AC%A1%E7%88%AC%E6%96%B9%E6%AD%A3%E6%95%99%E5%8A%A1%E5%A4%84%E7%9A%84%E6%88%90%E5%8A%9F%E5%AE%9E%E8%B7%B5/</guid>
      <description>前戏 不知道从什么时候开始,搞教务处已经成了我山CS专业的学生学习一门新的WEB语言(只要跟web沾边的) Java PHP Python NodeJS Golang&amp;hellip;</description>
    </item>
    
    <item>
      <title>一次爬方正教务处的成功实践(第二弹)----jwcconn的第一次Release</title>
      <link>https://blog.scnace.me/post/%E4%B8%80%E6%AC%A1%E7%88%AC%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E5%A4%84%E7%9A%84%E6%88%90%E5%8A%9F%E4%BA%8B%E4%BB%B6%E4%B8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E4%B8%80%E6%AC%A1%E7%88%AC%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E5%A4%84%E7%9A%84%E6%88%90%E5%8A%9F%E4%BA%8B%E4%BB%B6%E4%B8%8B/</guid>
      <description>前情回顾: 之前的一次爬教务处的成功实践里面记录了一些在爬教务处时需要注意的点。并PO出了一份Beego写的教务处的API版本.但是由于没有前</description>
    </item>
    
    <item>
      <title>从遍历DOM树谈BFS和DFS</title>
      <link>https://blog.scnace.me/post/%E4%BB%8E%E9%81%8D%E5%8E%86dom%E6%A0%91%E8%B0%88dfs%E5%92%8Cbfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E4%BB%8E%E9%81%8D%E5%8E%86dom%E6%A0%91%E8%B0%88dfs%E5%92%8Cbfs/</guid>
      <description>工作点滴(闲谈) 这是工作点滴目录下的第一篇文章,上班确实累,老大其实也没怎么带我,就说了几个需求,让我自己去完成,最后完成帮我做次Code/</description>
    </item>
    
    <item>
      <title>修改Golang template语法</title>
      <link>https://blog.scnace.me/post/%E4%BF%AE%E6%94%B9golang%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E4%BF%AE%E6%94%B9golang%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</guid>
      <description>前言 记得之前看过V站(v2ex)的一个讨论帖,内容就是关于前端的模板语法会跟后端的模板语法冲突.我也同意 统一渲染 的观点,比如 由后端统一进行d</description>
    </item>
    
    <item>
      <title>关于JSON的思索</title>
      <link>https://blog.scnace.me/post/%E5%88%B0%E5%BA%95%E4%BB%80%E4%B9%88%E6%89%8D%E6%98%AF%E5%90%88%E6%B3%95json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E5%88%B0%E5%BA%95%E4%BB%80%E4%B9%88%E6%89%8D%E6%98%AF%E5%90%88%E6%B3%95json/</guid>
      <description>JavaScript Object Notation 简述 JSON是这几年一下子火爆起来的数据交换格式,在前后端的交互中,JSON也似乎变成了一门必修课,相比之下,反而像XML之类的格式在</description>
    </item>
    
    <item>
      <title>关于golang的延后执行defer</title>
      <link>https://blog.scnace.me/post/%E5%85%B3%E4%BA%8Egolang%E7%9A%84%E5%BB%B6%E5%90%8E%E6%89%A7%E8%A1%8Cdefer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E5%85%B3%E4%BA%8Egolang%E7%9A%84%E5%BB%B6%E5%90%8E%E6%89%A7%E8%A1%8Cdefer/</guid>
      <description>defer:在函数执行到最后时,再进行调用声明了defer的函数。 DEMO： package main import ( &amp;quot;fmt&amp;quot; ) func defer_first(){ fmt.Println(&amp;quot;Hi ! I&#39;m first defer&amp;quot;); } func dataOp(data1 float32 ,data2 float32)(float32,float32){ return data1+data2,data1*data2 } //只有一个defe</description>
    </item>
    
    <item>
      <title>关于代理池</title>
      <link>https://blog.scnace.me/post/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%90%86%E6%B1%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%90%86%E6%B1%A0/</guid>
      <description>写在前面 在很多个爬虫死于非命之后,果然不出所料,接到了新的需求:新增代理池.其实也不用说,在Web站点和爬虫的斗争中,爬虫太容易就可以伪装自</description>
    </item>
    
    <item>
      <title>嘛,说说我与Astral的故事吧(第一弹)</title>
      <link>https://blog.scnace.me/post/the-story-about-astal-and-me-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/the-story-about-astal-and-me-1/</guid>
      <description>嘛,说说我和Astral的故事吧(第一弹) From Wechat bot to Telegram bot 在序篇中,我曾提到写Astral的初衷是个Wechat Bot,所以,在引入了wecha</description>
    </item>
    
    <item>
      <title>嘛,说说我与Astral的故事吧(第零弹)</title>
      <link>https://blog.scnace.me/post/astral-0ea3c4c0-acbf-48be-a1af-9660474dd0e2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/astral-0ea3c4c0-acbf-48be-a1af-9660474dd0e2/</guid>
      <description>嘛,说说我与Astral的故事吧(第零弹) GitHub Repo Who is Astral Astral是个有趣的名字,这个名字出自《游戏王Zexal》, 是主角游马来自异世界(星光</description>
    </item>
    
    <item>
      <title>天朝局域网内go get的正确姿势</title>
      <link>https://blog.scnace.me/post/%E4%B8%BAgo-get%E6%8A%A4%E8%88%AA-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E4%B8%BAgo-get%E6%8A%A4%E8%88%AA-/</guid>
      <description>前言 Golang获取包最简单的方法就是直接执行go get xxxx,与此同时,这也是Golang被诟病很多的一点 非常不利于版本管理 个人的工作环境可</description>
    </item>
    
    <item>
      <title>当我们ssh {{user}}@{{ip}} 发生了什么?</title>
      <link>https://blog.scnace.me/post/%E5%85%B3%E4%BA%8Essh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E5%85%B3%E4%BA%8Essh/</guid>
      <description>当我们需要登录我们的云服务器时,经常会用到ssh命令,但是当我们ssh root@192.168.1.1 时到底发生了什么? 基于ssh-1协议的描述</description>
    </item>
    
    <item>
      <title>有可能是一种思路不一样的网站内容更新的监测方案</title>
      <link>https://blog.scnace.me/post/etag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/etag/</guid>
      <description>Etag(实体标签) ETag是一个不透明的标识符，由Web服务器根据URL上的资源的特定版本而指定。如果那个URL上的资源内容改变，一个新的</description>
    </item>
    
    <item>
      <title>用CookieJar获取一次302/301跳转的Cookie</title>
      <link>https://blog.scnace.me/post/%E7%94%A8cookiejar%E6%8B%A6%E6%88%AA%E4%B8%80%E6%AC%A1302%E8%B7%B3%E8%BD%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E7%94%A8cookiejar%E6%8B%A6%E6%88%AA%E4%B8%80%E6%AC%A1302%E8%B7%B3%E8%BD%AC/</guid>
      <description>问题描述: 在遇到需要登录的场景下,往往需要一次302/301跳转,然而我们的Client会跟着一起跳转,这时如果获取response.Coo</description>
    </item>
    
    <item>
      <title>简化数组操作</title>
      <link>https://blog.scnace.me/post/%E7%AE%80%E5%8C%96%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E7%AE%80%E5%8C%96%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</guid>
      <description>场景介绍： 这个方法用在获取到一个(多维)Array后，要对其结构和数据进行变更。这篇介绍往已有键值对的数组后面(the bottom of the stack)添加</description>
    </item>
    
    <item>
      <title>记一个有趣的bug</title>
      <link>https://blog.scnace.me/post/%E8%AE%B0%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84bug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E8%AE%B0%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84bug/</guid>
      <description>先看代码 Go Playground package main import ( &amp;quot;fmt&amp;quot; ) type bug struct { name string cause string } func main() { bugNames := []string{&amp;quot;an&amp;quot;, &amp;quot;interesting&amp;quot;, &amp;quot;bug&amp;quot;} var bugs []*bug bugObj := &amp;amp;bug{ cause: &amp;quot;sth&amp;quot;, } for idx, bn := range bugNames { bugs = append(bugs, bugObj) bugs[idx].name = bn } for _, b := range bugs { fmt.Printf(&amp;quot;bug:%v&amp;quot;, *b) } } 其实,不难看</description>
    </item>
    
    <item>
      <title>记一次博客搬家</title>
      <link>https://blog.scnace.me/post/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%E6%90%AC%E5%AE%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.scnace.me/post/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%E6%90%AC%E5%AE%B6/</guid>
      <description>为什么要搬家? 一直想找一个轻量级的blog框架 觉得wordpress太重了 每次想写点东西都要进到wp的后台 而且离开了自己一直喜欢的Edito</description>
    </item>
    
  </channel>
</rss>